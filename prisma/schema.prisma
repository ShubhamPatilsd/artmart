// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum PostType {
  painting
  sculpture
}

enum PreferenceType {
  painting
  sculpture
  none
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  requests         Trade[]   @relation("requests")
  incomingRequests Trade[]   @relation("incoming")
  sessions         Session[]
  Post             Post[]
}

model Trade {
  id       String @id @default(cuid())
  // Relations
  to       User   @relation("incoming", fields: [authorId], references: [id])
  authorId String

  from        User   @relation(name: "requests", fields: [requesterId], references: [id])
  requesterId String

  postInQuestion Post   @relation(fields: [postId], references: [id])
  postId         String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  // General attributes
  id             String         @id @default(cuid())
  title          String
  description    String
  imageUrl       String
  category       PostType
  preferredTrade PreferenceType

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trade     Trade[]
}
